<!DOCTYPE html>
<html><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8"><style>.blocklyDraggable {}
.blocklySvg {
background-color: #fff;
outline: none;
overflow: hidden;
position: absolute;
display: block;
}
.blocklyWidgetDiv {
display: none;
position: absolute;
z-index: 99999;
}
.injectionDiv {
height: 100%;
position: relative;
overflow: hidden;
touch-action: none
}
.blocklyNonSelectable {
user-select: none;
-moz-user-select: none;
-ms-user-select: none;
-webkit-user-select: none;
}
.blocklyWsDragSurface {
display: none;
position: absolute;
top: 0;
left: 0;
}
.blocklyWsDragSurface.blocklyOverflowVisible {
overflow: visible;
}
.blocklyBlockDragSurface {
display: none;
position: absolute;
top: 0;
left: 0;
right: 0;
bottom: 0;
overflow: visible !important;
z-index: 50;
}
.blocklyBlockCanvas.blocklyCanvasTransitioning,
.blocklyBubbleCanvas.blocklyCanvasTransitioning {
transition: transform .5s;
}
.blocklyTooltipDiv {
background-color: #ffffc7;
border: 1px solid #ddc;
box-shadow: 4px 4px 20px 1px rgba(0,0,0,.15);
color: #000;
display: none;
font-family: sans-serif;
font-size: 9pt;
opacity: .9;
padding: 2px;
position: absolute;
z-index: 100000;
}
.blocklyResizeSE {
cursor: se-resize;
fill: #aaa;
}
.blocklyResizeSW {
cursor: sw-resize;
fill: #aaa;
}
.blocklyResizeLine {
stroke: #515A5A;
stroke-width: 1;
}
.blocklyHighlightedConnectionPath {
fill: none;
stroke: #fc3;
stroke-width: 4px;
}
.blocklyPathLight {
fill: none;
stroke-linecap: round;
stroke-width: 1;
}
.blocklySelected>.blocklyPath {
stroke: #fc3;
stroke-width: 3px;
}
.blocklySelected>.blocklyPathLight {
display: none;
}
.blocklyDraggable {
cursor: url("https://blockly-demo.appspot.com/static/media/handopen.cur"), auto;
cursor: grab;
cursor: -webkit-grab;
}
.blocklyDragging {
cursor: url("https://blockly-demo.appspot.com/static/media/handclosed.cur"), auto;
cursor: grabbing;
cursor: -webkit-grabbing;
}
.blocklyDraggable:active {
cursor: url("https://blockly-demo.appspot.com/static/media/handclosed.cur"), auto;
cursor: grabbing;
cursor: -webkit-grabbing;
}
.blocklyBlockDragSurface .blocklyDraggable {
cursor: url("https://blockly-demo.appspot.com/static/media/handclosed.cur"), auto;
cursor: grabbing;
cursor: -webkit-grabbing;
}
.blocklyDragging.blocklyDraggingDelete {
cursor: url("https://blockly-demo.appspot.com/static/media/handdelete.cur"), auto;
}
.blocklyToolboxDelete {
cursor: url("https://blockly-demo.appspot.com/static/media/handdelete.cur"), auto;
}
.blocklyToolboxGrab {
cursor: url("https://blockly-demo.appspot.com/static/media/handclosed.cur"), auto;
cursor: grabbing;
cursor: -webkit-grabbing;
}
.blocklyDragging>.blocklyPath,
.blocklyDragging>.blocklyPathLight {
fill-opacity: .8;
stroke-opacity: .8;
}
.blocklyDragging>.blocklyPathDark {
display: none;
}
.blocklyDisabled>.blocklyPath {
fill-opacity: .5;
stroke-opacity: .5;
}
.blocklyDisabled>.blocklyPathLight,
.blocklyDisabled>.blocklyPathDark {
display: none;
}
.blocklyText {
cursor: default;
fill: #fff;
font-family: sans-serif;
font-size: 11pt;
}
.blocklyNonEditableText>text {
pointer-events: none;
}
.blocklyNonEditableText>rect,
.blocklyEditableText>rect {
fill: #fff;
fill-opacity: .6;
}
.blocklyNonEditableText>text,
.blocklyEditableText>text {
fill: #000;
}
.blocklyEditableText:hover>rect {
stroke: #fff;
stroke-width: 2;
}
.blocklyBubbleText {
fill: #000;
}
.blocklyFlyout {
position: absolute;
z-index: 20;
}
.blocklyFlyoutButton {
fill: #888;
cursor: default;
}
.blocklyFlyoutButtonShadow {
fill: #666;
}
.blocklyFlyoutButton:hover {
fill: #aaa;
}
.blocklyFlyoutLabel {
cursor: default;
}
.blocklyFlyoutLabelBackground {
opacity: 0;
}
.blocklyFlyoutLabelText {
fill: #000;
}
.blocklySvg text, .blocklyBlockDragSurface text {
user-select: none;
-moz-user-select: none;
-ms-user-select: none;
-webkit-user-select: none;
cursor: inherit;
}
.blocklyHidden {
display: none;
}
.blocklyFieldDropdown:not(.blocklyHidden) {
display: block;
}
.blocklyIconGroup {
cursor: default;
}
.blocklyIconGroup:not(:hover),
.blocklyIconGroupReadonly {
opacity: .6;
}
.blocklyIconShape {
fill: #00f;
stroke: #fff;
stroke-width: 1px;
}
.blocklyIconSymbol {
fill: #fff;
}
.blocklyMinimalBody {
margin: 0;
padding: 0;
}
.blocklyCommentForeignObject {
position: relative;
z-index: 0;
}
.blocklyCommentRect {
fill: #E7DE8E;
stroke: #bcA903;
stroke-width: 1px
}
.blocklyCommentTarget {
fill: transparent;
stroke: #bcA903;
}
.blocklyCommentTargetFocused {
fill: none;
}
.blocklyCommentHandleTarget {
fill: none;
}
.blocklyCommentHandleTargetFocused {
fill: transparent;
}
.blocklyFocused>.blocklyCommentRect {
fill: #B9B272;
stroke: #B9B272;
}
.blocklySelected>.blocklyCommentTarget {
stroke: #fc3;
stroke-width: 3px;
}
.blocklyCommentTextarea {
background-color: #fef49c;
border: 0;
outline: 0;
margin: 0;
padding: 3px;
resize: none;
display: block;
overflow: hidden;
}
.blocklyCommentDeleteIcon {
cursor: pointer;
fill: #000;
display: none
}
.blocklySelected > .blocklyCommentDeleteIcon {
display: block
}
.blocklyDeleteIconShape {
fill: #000;
stroke: #000;
stroke-width: 1px;
}
.blocklyDeleteIconShape.blocklyDeleteIconHighlighted {
stroke: #fc3;
}
.blocklyHtmlInput {
border: none;
border-radius: 4px;
font-family: sans-serif;
height: 100%;
margin: 0;
outline: none;
padding: 0 1px;
width: 100%
}
.blocklyMainBackground {
stroke-width: 1;
stroke: #c6c6c6;
}
.blocklyMutatorBackground {
fill: #fff;
stroke: #ddd;
stroke-width: 1;
}
.blocklyFlyoutBackground {
fill: #ddd;
fill-opacity: .8;
}
.blocklyTransparentBackground {
opacity: 0;
}
.blocklyMainWorkspaceScrollbar {
z-index: 20;
}
.blocklyFlyoutScrollbar {
z-index: 30;
}
.blocklyScrollbarHorizontal, .blocklyScrollbarVertical {
position: absolute;
outline: none;
}
.blocklyScrollbarBackground {
opacity: 0;
}
.blocklyScrollbarHandle {
fill: #ccc;
}
.blocklyScrollbarBackground:hover+.blocklyScrollbarHandle,
.blocklyScrollbarHandle:hover {
fill: #bbb;
}
.blocklyZoom>image {
opacity: .4;
}
.blocklyZoom>image:hover {
opacity: .6;
}
.blocklyZoom>image:active {
opacity: .8;
}
.blocklyFlyout .blocklyScrollbarHandle {
fill: #bbb;
}
.blocklyFlyout .blocklyScrollbarBackground:hover+.blocklyScrollbarHandle,
.blocklyFlyout .blocklyScrollbarHandle:hover {
fill: #aaa;
}
.blocklyInvalidInput {
background: #faa;
}
.blocklyAngleCircle {
stroke: #444;
stroke-width: 1;
fill: #ddd;
fill-opacity: .8;
}
.blocklyAngleMarks {
stroke: #444;
stroke-width: 1;
}
.blocklyAngleGauge {
fill: #f88;
fill-opacity: .8;
}
.blocklyAngleLine {
stroke: #f00;
stroke-width: 2;
stroke-linecap: round;
pointer-events: none;
}
.blocklyContextMenu {
border-radius: 4px;
}
.blocklyDropdownMenu {
padding: 0 !important;
}
.blocklyWidgetDiv .goog-option-selected .goog-menuitem-checkbox,
.blocklyWidgetDiv .goog-option-selected .goog-menuitem-icon {
background: url(_static/sprites.png) no-repeat -48px -16px !important;
}
.blocklyToolboxDiv {
background-color: #ddd;
overflow-x: visible;
overflow-y: auto;
position: absolute;
user-select: none;
-moz-user-select: none;
-ms-user-select: none;
-webkit-user-select: none;
z-index: 70;
-webkit-tap-highlight-color: transparent;
}
.blocklyTreeRoot {
padding: 4px 0;
}
.blocklyTreeRoot:focus {
outline: none;
}
.blocklyTreeRow {
height: 22px;
line-height: 22px;
margin-bottom: 3px;
padding-right: 8px;
white-space: nowrap;
}
.blocklyHorizontalTree {
float: left;
margin: 1px 5px 8px 0;
}
.blocklyHorizontalTreeRtl {
float: right;
margin: 1px 0 8px 5px;
}
.blocklyToolboxDiv[dir="RTL"] .blocklyTreeRow {
margin-left: 8px;
}
.blocklyTreeRow:not(.blocklyTreeSelected):hover {
background-color: #e4e4e4;
}
.blocklyTreeSeparator {
border-bottom: solid #e5e5e5 1px;
height: 0;
margin: 5px 0;
}
.blocklyTreeSeparatorHorizontal {
border-right: solid #e5e5e5 1px;
width: 0;
padding: 5px 0;
margin: 0 5px;
}
.blocklyTreeIcon {
background-image: url(_static/sprites.png);
height: 16px;
vertical-align: middle;
width: 16px;
}
.blocklyTreeIconClosedLtr {
background-position: -32px -1px;
}
.blocklyTreeIconClosedRtl {
background-position: 0 -1px;
}
.blocklyTreeIconOpen {
background-position: -16px -1px;
}
.blocklyTreeSelected>.blocklyTreeIconClosedLtr {
background-position: -32px -17px;
}
.blocklyTreeSelected>.blocklyTreeIconClosedRtl {
background-position: 0 -17px;
}
.blocklyTreeSelected>.blocklyTreeIconOpen {
background-position: -16px -17px;
}
.blocklyTreeIconNone,
.blocklyTreeSelected>.blocklyTreeIconNone {
background-position: -48px -1px;
}
.blocklyTreeLabel {
cursor: default;
font-family: sans-serif;
font-size: 16px;
padding: 0 3px;
vertical-align: middle;
}
.blocklyToolboxDelete .blocklyTreeLabel {
cursor: url("https://blockly-demo.appspot.com/static/media/handdelete.cur"), auto;
}
.blocklyTreeSelected .blocklyTreeLabel {
color: #fff;
}
.blocklyColourTable {
border-collapse: collapse;
}
.blocklyColourTable>tr>td {
border: 1px solid #666;
padding: 0;
}
.blocklyColourTable>tr>td>div {
border: 1px solid #666;
height: 13px;
width: 15px;
}
.blocklyColourTable>tr>td>div:hover {
border: 1px solid #fff;
}
.blocklyColourSelected, .blocklyColourSelected:hover {
border: 1px solid #000 !important;
}
.blocklyWidgetDiv .goog-menu {
background: #fff;
border-color: #ccc #666 #666 #ccc;
border-style: solid;
border-width: 1px;
cursor: default;
font: normal 13px Arial, sans-serif;
margin: 0;
outline: none;
padding: 4px 0;
position: absolute;
overflow-y: auto;
overflow-x: hidden;
max-height: 100%;
z-index: 20000;
}
.blocklyWidgetDiv .goog-menuitem {
color: #000;
font: normal 13px Arial, sans-serif;
list-style: none;
margin: 0;
padding: 4px 7em 4px 28px;
white-space: nowrap;
}
.blocklyWidgetDiv .goog-menuitem.goog-menuitem-rtl {
padding-left: 7em;
padding-right: 28px;
}
.blocklyWidgetDiv .goog-menu-nocheckbox .goog-menuitem,
.blocklyWidgetDiv .goog-menu-noicon .goog-menuitem {
padding-left: 12px;
}
.blocklyWidgetDiv .goog-menu-noaccel .goog-menuitem {
padding-right: 20px;
}
.blocklyWidgetDiv .goog-menuitem-content {
color: #000;
font: normal 13px Arial, sans-serif;
}
.blocklyWidgetDiv .goog-menuitem-disabled .goog-menuitem-accel,
.blocklyWidgetDiv .goog-menuitem-disabled .goog-menuitem-content {
color: #ccc !important;
}
.blocklyWidgetDiv .goog-menuitem-disabled .goog-menuitem-icon {
opacity: 0.3;
filter: alpha(opacity=30);
}
.blocklyWidgetDiv .goog-menuitem-highlight,
.blocklyWidgetDiv .goog-menuitem-hover {
background-color: #d6e9f8;
border-color: #d6e9f8;
border-style: dotted;
border-width: 1px 0;
padding-bottom: 3px;
padding-top: 3px;
}
.blocklyWidgetDiv .goog-menuitem-checkbox,
.blocklyWidgetDiv .goog-menuitem-icon {
background-repeat: no-repeat;
height: 16px;
left: 6px;
position: absolute;
right: auto;
vertical-align: middle;
width: 16px;
}
.blocklyWidgetDiv .goog-menuitem-rtl .goog-menuitem-checkbox,
.blocklyWidgetDiv .goog-menuitem-rtl .goog-menuitem-icon {
left: auto;
right: 6px;
}
.blocklyWidgetDiv .goog-option-selected .goog-menuitem-checkbox,
.blocklyWidgetDiv .goog-option-selected .goog-menuitem-icon {
background: url(//ssl.gstatic.com/editor/editortoolbar.png) no-repeat -512px 0;
}
.blocklyWidgetDiv .goog-menuitem-accel {
color: #999;
direction: ltr;
left: auto;
padding: 0 6px;
position: absolute;
right: 0;
text-align: right;
}
.blocklyWidgetDiv .goog-menuitem-rtl .goog-menuitem-accel {
left: 0;
right: auto;
text-align: left;
}
.blocklyWidgetDiv .goog-menuitem-mnemonic-hint {
text-decoration: underline;
}
.blocklyWidgetDiv .goog-menuitem-mnemonic-separator {
color: #999;
font-size: 12px;
padding-left: 4px;
}
.blocklyWidgetDiv .goog-menuseparator {
border-top: 1px solid #ccc;
margin: 4px 0;
padding: 0;
}
</style>
  <script src="bd_files/blockly_compressed.js"></script>
  <script src="bd_files/blocks_compressed.js"></script>
  <script src="bd_files/en.js"></script>
  <script src="bd_files/javascript_compressed.js"></script>
  <script src="bd_files/python_compressed.js"></script>
  <script src="bd_files/php_compressed.js"></script>
  <script src="bd_files/lua_compressed.js"></script>
  <script src="bd_files/dart_compressed.js"></script>
  <script src="bd_files/acorn_interpreter.js"></script>
  <script src="bd_files/prettify-bundle.js"></script>
  <link href="bd_files/devsite-cyan.css" rel="stylesheet">
  <link href="bd_files/blockly-demo.css" rel="stylesheet">
<style id="style-1-cropbar-clipper">/* Copyright 2014 Evernote Corporation. All rights reserved. */
.en-markup-crop-options {
    top: 18px !important;
    left: 50% !important;
    margin-left: -100px !important;
    width: 200px !important;
    border: 2px rgba(255,255,255,.38) solid !important;
    border-radius: 4px !important;
}

.en-markup-crop-options div div:first-of-type {
    margin-left: 0px !important;
}
</style>
<script>
var busCBCnt = 0;
Blockly.Blocks['sdl_on_config'] = {
  init: function() {
    this.appendStatementInput("STACK")
        .setCheck(null)
        .appendField("on_config");
    this.setColour(345);
    this.setCommentText("开机执行一次初始化");
 this.setTooltip("开机执行一次初始化");
 this.setHelpUrl("");
  }
};
Blockly.Lua['sdl_on_config'] = function(block) {
	var branch = Blockly.Lua.statementToCode(block, 'STACK');
  var code = 'function on_config() \n'+branch+'end\n'
  return code;
};
Blockly.Blocks['sdl_on_start'] = {
  init: function() {
    this.appendStatementInput("STACK")
        .setCheck(null)
        .appendField("on_start");
    this.setColour(345);
     this.setCommentText("定时执行任务起点");
 this.setTooltip("定时执行任务起点");
 this.setHelpUrl("");
  }
};
Blockly.Lua['sdl_on_start'] = function(block) {
	var branch = Blockly.Lua.statementToCode(block, 'STACK');
  var code = 'function on_start() \n'+branch+'end\n'
  return code;
};
Blockly.Blocks['sdl_rs422_send'] = {
  init: function() {
    this.appendDummyInput()
        .appendField("rs422_send");
    this.appendValueInput("DATA")
        .setCheck("Array")
        .appendField("发送数据：")
        .appendField(new Blockly.FieldVariable("data"), "DATA");
    this.appendDummyInput()
        .appendField("串口参数：")
        .appendField(new Blockly.FieldTextInput("115200_8N1"), "UART_PARAMETER");
    this.appendDummyInput()
        .appendField("超时时间（秒）：")
        .appendField(new Blockly.FieldNumber(3, 0), "TIMEOUT");
    this.appendDummyInput()
        .appendField("回调函数：")
        .appendField(new Blockly.FieldTextInput("rs422_bus_callback"+(busCBCnt++)), "CALLBACK");
    this.setInputsInline(false);
    this.setPreviousStatement(true, null);
    this.setNextStatement(true, null);
    this.setColour(230);
    this.setCommentText("利用RS422总线向传感器发送数据");
 this.setTooltip("利用RS422总线向传感器发送数据");
 this.setHelpUrl("");
 this.setOnChange(function(event){
	if(event.type == Blockly.Events.CREATE)
	{
		var block = workspace.getBlockById(event.blockId);
		if(block == this)
		{
			//Blockly.Events.disable();
			var cbName = this.getField("CALLBACK").text_;
			var busCbBlock = workspace.newBlock("procedures_defnoreturn");

			busCbBlock.initSvg();
			//Blockly.Events.enable();
			busCbBlock.getField("NAME").setText(cbName);
			busCbBlock.arguments_ = ["status","data"];
			busCbBlock.updateParams_();
			busCbBlock.setCommentText("rs422总线回调函数");
			busCbBlock.render();
		}
	}
 });
  }
};
Blockly.Lua['sdl_rs422_send'] = function(block) {
  var variable_data = Blockly.Lua.variableDB_.getName(block.getFieldValue('DATA'), Blockly.Variables.NAME_TYPE);
  var value_data = Blockly.Lua.valueToCode(block, 'DATA', Blockly.JavaScript.ORDER_ATOMIC) || '{}';
  var text_uart_parameter = '\''+block.getFieldValue('UART_PARAMETER')+'\'';
  var number_timeout = block.getFieldValue('TIMEOUT');

  var statement_name =block.getFieldValue('CALLBACK');
  // TODO: Assemble JavaScript into code variable.
  var code = 'rs422_send('+ value_data +','+text_uart_parameter+','+number_timeout+ ','+statement_name+')\n';
  return code;
};
Blockly.Blocks['sdl_modbus_send'] = {
  init: function() {
    this.appendDummyInput()
        .appendField("modbus_send");
    this.appendValueInput("DATA")
        .setCheck("Array")
        .appendField("发送数据：")
        .appendField(new Blockly.FieldVariable("data"), "DATA");
    this.appendDummyInput()
        .appendField("串口参数：")
        .appendField(new Blockly.FieldTextInput("115200_8N1"), "UART_PARAMETER");
    this.appendDummyInput()
        .appendField("超时时间（秒）：")
        .appendField(new Blockly.FieldNumber(3, 0), "TIMEOUT");
    this.appendDummyInput()
        .appendField("回调函数：")
        .appendField(new Blockly.FieldTextInput("modbus_bus_callback"+(busCBCnt++)), "CALLBACK");
    this.setPreviousStatement(true, null);
    this.setNextStatement(true, null);
    this.setColour(230);
this.setCommentText("利用modbus协议(rs422)总线向传感器发送数据");
 this.setTooltip("利用modbus协议(rs422)总线向传感器发送数据");
 this.setHelpUrl("");
 this.setOnChange(function(event){
	if(event.type == Blockly.Events.CREATE)
	{
		var block = workspace.getBlockById(event.blockId);
		if(block == this)
		{
			//Blockly.Events.disable();
			var cbName = this.getField("CALLBACK").text_;
			var busCbBlock = workspace.newBlock("procedures_defnoreturn");

			busCbBlock.initSvg();
			//Blockly.Events.enable();
			busCbBlock.getField("NAME").setText(cbName);
			busCbBlock.arguments_ = ["status","data"];
			busCbBlock.setCommentText("modbus回调函数");
			busCbBlock.updateParams_();
			busCbBlock.render();
		}
	}
 });
  }
};
Blockly.Lua['sdl_modbus_send'] = function(block) {
  var variable_data = Blockly.Lua.variableDB_.getName(block.getFieldValue('DATA'), Blockly.Variables.NAME_TYPE);
  var value_data = Blockly.Lua.valueToCode(block, 'DATA', Blockly.JavaScript.ORDER_ATOMIC) || '{}';
  var text_uart_parameter = '\''+ block.getFieldValue('UART_PARAMETER') +'\'';
  var number_timeout = block.getFieldValue('TIMEOUT');
 
  var statement_name =block.getFieldValue('CALLBACK');
  // TODO: Assemble JavaScript into code variable.
  var code = 'modbus_send('+ value_data +','+text_uart_parameter+','+number_timeout + ','+statement_name+')\n';
  return code;
};
Blockly.Blocks['sdl_rs232_send'] = {
  init: function() {
    this.appendDummyInput()
        .appendField("rs232_send");
    this.appendValueInput("DATA")
        .setCheck("Array")
        .appendField("发送数据：")
        .appendField(new Blockly.FieldVariable("data"), "DATA");
    this.appendDummyInput()
        .appendField("串口参数：")
        .appendField(new Blockly.FieldTextInput("115200_8N1"), "UART_PARAMETER");
    this.appendDummyInput()
        .appendField("超时时间（秒）：")
        .appendField(new Blockly.FieldNumber(3, 0), "TIMEOUT");
    this.appendDummyInput()
        .appendField("回调函数：")
        .appendField(new Blockly.FieldTextInput("rs232_bus_callback"+(busCBCnt++)), "CALLBACK");
    this.setPreviousStatement(true, null);
    this.setNextStatement(true, null);
    this.setColour(230);
 this.setTooltip("利用RS232总线向传感器发送数据");
 this.setCommentText("利用RS232总线向传感器发送数据");
 this.setHelpUrl("");
 this.setOnChange(function(event){
	if(event.type == Blockly.Events.CREATE)
	{
		var block = workspace.getBlockById(event.blockId);
		if(block == this)
		{
			//Blockly.Events.disable();
			var cbName = this.getField("CALLBACK").text_;
			var busCbBlock = workspace.newBlock("procedures_defnoreturn");

			busCbBlock.initSvg();
			//Blockly.Events.enable();
			busCbBlock.getField("NAME").setText(cbName);
			busCbBlock.arguments_ = ["status","data"];
			busCbBlock.setCommentText("rs232回调函数");
			busCbBlock.updateParams_();
			busCbBlock.render();
		}
	}
 });
  }
};
Blockly.Lua['sdl_rs232_send'] = function(block) {
  var variable_data = Blockly.Lua.variableDB_.getName(block.getFieldValue('DATA'), Blockly.Variables.NAME_TYPE);
  var value_data = Blockly.Lua.valueToCode(block, 'DATA', Blockly.JavaScript.ORDER_ATOMIC) || '{}';
  var text_uart_parameter = '\''+ block.getFieldValue('UART_PARAMETER') +'\'';
  var number_timeout = block.getFieldValue('TIMEOUT');

  var statement_name =block.getFieldValue('CALLBACK');
  // TODO: Assemble JavaScript into code variable.
  var code = 'rs232_send('+ value_data +','+text_uart_parameter+','+number_timeout + ','+statement_name+')\n';
  return code;
};


Blockly.Blocks['sdl_delay_call'] = {
  init: function() {
    this.appendDummyInput()
        .appendField("delay_call");
    this.appendValueInput("DELAY")
        .setCheck(null)
        .appendField("延时时间（秒）：")
        .appendField(new Blockly.FieldNumber(1, 0), "DELAY");
    this.appendDummyInput()
        .appendField("回调函数：")
	.appendField(new Blockly.FieldTextInput("delay_callback"+(busCBCnt++)), "CALLBACK");
    this.setPreviousStatement(true, null);
    this.setNextStatement(true, null);
    this.setColour(230);
 this.setTooltip("延时执行");
 this.setHelpUrl("");
 this.setCommentText("延时执行"); 
 this.setOnChange(function(event){
	if(event.type == Blockly.Events.CREATE)
	{
		var block = workspace.getBlockById(event.blockId);
		if(block == this)
		{
			//Blockly.Events.disable();
			var cbName = this.getField("CALLBACK").text_;
			var busCbBlock = workspace.newBlock("procedures_defnoreturn");
			busCbBlock.setCommentText("延时回调函数")
			busCbBlock.initSvg();
			//Blockly.Events.enable();
			busCbBlock.getField("NAME").setText(cbName);
			busCbBlock.render();
		}
	}
 });
  }
};
Blockly.Lua['sdl_delay_call'] = function(block) {
  var number_delay = block.getFieldValue('DELAY');
  var value_delay = Blockly.Lua.valueToCode(block, 'DELAY', Blockly.JavaScript.ORDER_ATOMIC) || number_delay;
  
  var statement_name =block.getFieldValue('CALLBACK');
  // TODO: Assemble JavaScript into code variable.
  var code = '--延时执行'+value_delay+'秒\n'+ 'delay_call('+value_delay+','+statement_name+')\n';
  return code;
};

Blockly.Blocks['sdl_add_data_item'] = {
  init: function() {
    this.appendDummyInput()
        .appendField("add_data_item");
    this.appendDummyInput()
        .appendField("主ID")
        .appendField(new Blockly.FieldNumber(0, 0, 255), "MID");
    this.appendDummyInput()
        .appendField("从ID")
        .appendField(new Blockly.FieldNumber(0, 0, 255), "CID");
    this.appendDummyInput()
        .appendField("数据类型")
        .appendField(new Blockly.FieldDropdown([["UCHAR(1)","\'UCHAR\'"],["SCHAR(1)","\'SCHAR\'"], ["UINT(2)","\'UINT\'"],["SINT(2)","\'SINT\'"], ["ULONG(4)","\'ULONG\'"],["ULONG(4)","\'ULONG\'"],["FLOAT(4)","\'FLOAT\'"],["BCD时间","\'BCD_YYMMDDHHMM\'"],["字符串","\'STRING\'"]]), "TYPE");
    this.appendValueInput("DATA")
        .setCheck(null)
        .appendField("保存数据")
        .appendField(new Blockly.FieldVariable("data"), "DATA");
    this.setPreviousStatement(true, null);
    this.setNextStatement(true, null);
    this.setColour(230);
 this.setTooltip("增加要保存的数据项目");
 this.setHelpUrl("");
  }
};
Blockly.Lua['sdl_add_data_item'] = function(block) {
  var number_mid = block.getFieldValue('MID');
  var number_cid = block.getFieldValue('CID');
  var dropdown_type = block.getFieldValue('TYPE');
  var variable_data = Blockly.Lua.variableDB_.getName(block.getFieldValue('DATA'), Blockly.Variables.NAME_TYPE) ;
  var value_data = Blockly.Lua.valueToCode(block, 'DATA', Blockly.JavaScript.ORDER_ATOMIC) || '{}';
  // TODO: Assemble JavaScript into code variable.
  var code = 'add_data_item('+number_mid+','+number_cid+','+dropdown_type+','+value_data+')\n';
  return code;
};
Blockly.Blocks['sdl_bcdtime'] = {
  init: function() {
    this.appendDummyInput()
        .appendField("bcdtime");
    this.setOutput(true, "Array");
    this.setColour(230);
 this.setTooltip("返回字节数组类型的BCD时间");
 this.setHelpUrl("");
  }
};
Blockly.Lua['sdl_bcdtime'] = function(block) {
  // TODO: Assemble JavaScript into code variable.
  var code = 'bcdtime()'
  // TODO: Change ORDER_NONE to the correct strength.
  return [code, Blockly.JavaScript.ORDER_NONE];
};
Blockly.Blocks['sdl_timestamp'] = {
  init: function() {
    this.appendDummyInput()
        .appendField("timestamp");
    this.setOutput(true, "Number");
    this.setColour(230);
 this.setTooltip("返回UNIX时间戳");
 this.setHelpUrl("");
  }
};
Blockly.Lua['sdl_timestamp'] = function(block) {
  // TODO: Assemble JavaScript into code variable.
  var code = 'timestamp()'
  // TODO: Change ORDER_NONE to the correct strength.
  return [code, Blockly.JavaScript.ORDER_NONE];
};
Blockly.Blocks['sdl_datetime'] = {
  init: function() {
    this.appendDummyInput()
        .appendField("datetime");
    this.setOutput(true, "String");
    this.setColour(230);
 this.setTooltip("返回字符串格式当前日期");
 this.setHelpUrl("");
  }
};
Blockly.Lua['sdl_datetime'] = function(block) {
  // TODO: Assemble JavaScript into code variable.
  var code = 'datetime()';
  // TODO: Change ORDER_NONE to the correct strength.
  return [code, Blockly.JavaScript.ORDER_NONE];
};

Blockly.Blocks['sdl_set_global_number'] = {
  init: function() {
    this.appendDummyInput()
        .appendField("set_global_number");
    this.appendValueInput("INDEX")
        .setCheck(null)
        .appendField("index")
        .appendField(new Blockly.FieldNumber(0, 0, 511), "INDEX");
    this.appendValueInput("NUMBER")
        .setCheck(null)
        .appendField("number")
        .appendField(new Blockly.FieldNumber(0, -Infinity, Infinity, 5), "NUMBER");
    this.setPreviousStatement(true, null);
    this.setNextStatement(true, null);
    this.setColour(230);
 this.setTooltip("设置number到指定的缓存位置");
 this.setHelpUrl("");
  }
};
Blockly.Lua['sdl_set_global_number'] = function(block) {
  var number_index = block.getFieldValue('INDEX');
  var value_index = Blockly.Lua.valueToCode(block, 'INDEX', Blockly.JavaScript.ORDER_ATOMIC) || number_index;
  var number_number = block.getFieldValue('NUMBER');
  var value_number = Blockly.Lua.valueToCode(block, 'NUMBER', Blockly.JavaScript.ORDER_ATOMIC) || number_number;
  // TODO: Assemble JavaScript into code variable.
  var code = 'set_global_number('+value_index + ',' + value_number +')\n';
  return code;
};

Blockly.Blocks['sdl_set_global_buffer'] = {
  init: function() {
    this.appendDummyInput()
        .appendField("set_global_buffer");
    this.appendValueInput("BUFFER")
        .setCheck("Array")
        .appendField("buffer")
        .appendField(new Blockly.FieldVariable("table"), "BUFFER");
    this.setPreviousStatement(true, null);
    this.setNextStatement(true, null);
    this.setColour(230);
 this.setTooltip("设置table型字节数组到缓存");
 this.setHelpUrl("");
  }
};
Blockly.Lua['sdl_set_global_buffer'] = function(block) {
  var variable_buffer = Blockly.Lua.variableDB_.getName(block.getFieldValue('BUFFER'), Blockly.Variables.NAME_TYPE);
  var value_buffer = Blockly.Lua.valueToCode(block, 'BUFFER', Blockly.Lua.ORDER_ATOMIC)|| '{}';
  // TODO: Assemble Lua into code variable.
  var code = 'set_global_buffer('+value_buffer+')\n';
  return code;
};
Blockly.Blocks['sdl_get_global_number'] = {
  init: function() {
    this.appendDummyInput()
        .appendField("get_global_number");
    this.appendValueInput("INDEX")
        .setCheck("Number")
        .appendField("index")
        .appendField(new Blockly.FieldNumber(0, 0, 511), "INDEX");
    this.setOutput(true, "Number");
    this.setColour(230);
 this.setTooltip("获取缓存区指定位置数据");
 this.setHelpUrl("");
  }
};
Blockly.Lua['sdl_get_global_number'] = function(block) {
  var number_index = block.getFieldValue('INDEX');
  var value_index = Blockly.Lua.valueToCode(block, 'INDEX', Blockly.Lua.ORDER_ATOMIC) || number_index;
  // TODO: Assemble Lua into code variable.
  var code = 'get_global_number('+value_index+')';
  // TODO: Change ORDER_NONE to the correct strength.
  return [code, Blockly.Lua.ORDER_NONE];
};
Blockly.Blocks['sdl_get_global_buffer'] = {
  init: function() {
    this.appendDummyInput()
        .appendField("get_global_buffer");
    this.setOutput(true, "Array");
    this.setColour(230);
 this.setTooltip("获取缓存区字节数组数据");
 this.setHelpUrl("");
  }
};
Blockly.Lua['sdl_get_global_buffer'] = function(block) {
  // TODO: Assemble Lua into code variable.
  var code = 'get_global_buffer()'
  // TODO: Change ORDER_NONE to the correct strength.
  return [code, Blockly.Lua.ORDER_NONE];
};

Blockly.Blocks['sdl_vol_single_get'] = {
  init: function() {
    this.appendDummyInput()
        .appendField("vol_single_get");
    this.appendDummyInput()
        .appendField("采集通道：")
        .appendField(new Blockly.FieldDropdown([["AD0","\"AD0\""], ["AD1","\"AD1\""], ["AD2","\"AD2\""], ["AD3","\"AD3\""], ["AD4","\"AD4\""], ["AD5","\"AD5\""]]), "CHANNEL");
    this.setOutput(true, "Number");
    this.setColour(230);
 this.setTooltip("单端电压采集");
 
 this.setHelpUrl("");
  }
};
Blockly.Lua['sdl_vol_single_get'] = function(block) {
  var dropdown_channel = block.getFieldValue('CHANNEL');
  var value_ad_channel = Blockly.Lua.valueToCode(block, 'AD_CHANNEL', Blockly.Lua.ORDER_ATOMIC) || dropdown_channel;
  // TODO: Assemble Lua into code variable.
  var code = 'vol_single_get('+value_ad_channel+')';
  // TODO: Change ORDER_NONE to the correct strength.
  return [code, Blockly.Lua.ORDER_NONE];
};
Blockly.Blocks['sdl_vol_diff_get'] = {
  init: function() {
    this.appendDummyInput()
        .appendField("vol_diff_get");
    this.appendDummyInput()
        .appendField("被减通道：")
        .appendField(new Blockly.FieldDropdown([["AD0","\"AD0\""], ["AD1","\"AD1\""], ["AD2","\"AD2\""], ["AD3","\"AD3\""], ["AD4","\"AD4\""], ["AD5","\"AD5\""]]), "CHANNEL1");
    this.appendDummyInput()
        .appendField("减数通道：")
        .appendField(new Blockly.FieldDropdown([["AD0","\"AD0\""], ["AD1","\"AD1\""], ["AD2","\"AD2\""], ["AD3","\"AD3\""], ["AD4","\"AD4\""], ["AD5","\"AD5\""]]), "CHANNEL2");
    this.setOutput(true, "Number");
    this.setColour(230);
 this.setTooltip("差分电压采集");
 this.setHelpUrl("");
  }
};
Blockly.Lua['sdl_vol_diff_get'] = function(block) {
  var dropdown_channel1 = block.getFieldValue('CHANNEL1');
  var value_ad_channel1 = Blockly.Lua.valueToCode(block, 'AD_CHANNEL1', Blockly.Lua.ORDER_ATOMIC) || dropdown_channel1;
  var dropdown_channel2 = block.getFieldValue('CHANNEL2');
  var value_ad_channel2 = Blockly.Lua.valueToCode(block, 'AD_CHANNEL2', Blockly.Lua.ORDER_ATOMIC) || dropdown_channel2;
  // TODO: Assemble Lua into code variable.
  var code = 'vol_diff_get('+value_ad_channel1+',' + value_ad_channel2 + ')';
  // TODO: Change ORDER_NONE to the correct strength.
  return [code, Blockly.Lua.ORDER_NONE];
};
Blockly.Blocks['sdl_current_get'] = {
  init: function() {
    this.appendDummyInput()
        .appendField("current_get");
    this.appendDummyInput()
        .appendField("获取电流测量结果");
    this.appendDummyInput()
        .appendField("采集通道：")
        .appendField(new Blockly.FieldDropdown([["AD2","\"AD2\""], ["AD3","\"AD3\""]]), "CHANNEL");
    this.setOutput(true, "Number");
    this.setColour(230);
 this.setTooltip("电流测量");
 this.setHelpUrl("");
  }
};
Blockly.Lua['sdl_current_get'] = function(block) {
  var dropdown_channel = block.getFieldValue('CHANNEL');
  // TODO: Assemble Lua into code variable.
  var code = 'current_get('+dropdown_channel+')';
  // TODO: Change ORDER_NONE to the correct strength.
  return [code, Blockly.Lua.ORDER_NONE];
};
Blockly.Blocks['sdl_pt100_4wire_get'] = {
  init: function() {
    this.appendDummyInput()
        .appendField("pt100_4wire_get");
    this.appendDummyInput()
        .appendField("获取4线式PT100的电阻值");
    this.appendDummyInput()
        .appendField("采集通道1：")
	.appendField(new Blockly.FieldDropdown([["AD0","\"AD0\""], ["AD1","\"AD1\""], ["AD2","\"AD2\""], ["AD3","\"AD3\""], ["AD4","\"AD4\""], ["AD5","\"AD5\""]]), "CHANNEL1");
    this.appendDummyInput()
        .appendField("采集通道2：")
	.appendField(new Blockly.FieldDropdown([["AD0","\"AD0\""], ["AD1","\"AD1\""], ["AD2","\"AD2\""], ["AD3","\"AD3\""], ["AD4","\"AD4\""], ["AD5","\"AD5\""]]), "CHANNEL2");
    this.appendDummyInput()
        .appendField("采集通道3：")
	.appendField(new Blockly.FieldDropdown([["AD0","\"AD0\""], ["AD1","\"AD1\""], ["AD2","\"AD2\""], ["AD3","\"AD3\""], ["AD4","\"AD4\""], ["AD5","\"AD5\""]]), "CHANNEL3");
    this.appendDummyInput()
        .appendField("采集通道4：")
	.appendField(new Blockly.FieldDropdown([["AD0","\"AD0\""], ["AD1","\"AD1\""], ["AD2","\"AD2\""], ["AD3","\"AD3\""], ["AD4","\"AD4\""], ["AD5","\"AD5\""]]), "CHANNEL4");
    this.setOutput(true, "Number");
    this.setColour(230);
 this.setTooltip("获取4线式PT100的电阻值");
 this.setHelpUrl("");
  }
};
Blockly.Lua['sdl_pt100_4wire_get'] = function(block) {
  var dropdown_channel1 = block.getFieldValue('CHANNEL1');
  var dropdown_channel2 = block.getFieldValue('CHANNEL2');
  var dropdown_channel3 = block.getFieldValue('CHANNEL3');
  var dropdown_channel4 = block.getFieldValue('CHANNEL4');
  // TODO: Assemble Lua into code variable.
  var code = 'pt100_4wire_get('+dropdown_channel1+','+dropdown_channel2+','+dropdown_channel3+ ','+ dropdown_channel4+')';
  // TODO: Change ORDER_NONE to the correct strength.
  return [code, Blockly.Lua.ORDER_NONE];
};

Blockly.Blocks['sdl_pt100_3wire_get'] = {
  init: function() {
    this.appendDummyInput()
        .appendField("pt100_3wire_get");
    this.appendDummyInput()
        .appendField("获取3线式PT100的电阻值");
    this.appendDummyInput()
        .appendField("采集通道1：")
	.appendField(new Blockly.FieldDropdown([["AD0","\"AD0\""], ["AD1","\"AD1\""], ["AD2","\"AD2\""], ["AD3","\"AD3\""], ["AD4","\"AD4\""], ["AD5","\"AD5\""]]), "CHANNEL1");
    this.appendDummyInput()
        .appendField("采集通道2：")
	.appendField(new Blockly.FieldDropdown([["AD0","\"AD0\""], ["AD1","\"AD1\""], ["AD2","\"AD2\""], ["AD3","\"AD3\""], ["AD4","\"AD4\""], ["AD5","\"AD5\""]]), "CHANNEL2");
    this.appendDummyInput()
        .appendField("采集通道3：")
	.appendField(new Blockly.FieldDropdown([["AD0","\"AD0\""], ["AD1","\"AD1\""], ["AD2","\"AD2\""], ["AD3","\"AD3\""], ["AD4","\"AD4\""], ["AD5","\"AD5\""]]), "CHANNEL3");
    this.setOutput(true, "Number");
    this.setColour(230);
 this.setTooltip("获取3线式PT100的电阻值");
 this.setHelpUrl("");
  }
};
Blockly.Lua['sdl_pt100_3wire_get'] = function(block) {
  var dropdown_channel1 = block.getFieldValue('CHANNEL1');
  var dropdown_channel2 = block.getFieldValue('CHANNEL2');
  var dropdown_channel3 = block.getFieldValue('CHANNEL3');
  // TODO: Assemble Lua into code variable.
  var code = 'pt100_3wire_get('+dropdown_channel1+','+dropdown_channel2+','+dropdown_channel3+')';
  // TODO: Change ORDER_NONE to the correct strength.
  return [code, Blockly.Lua.ORDER_NONE];
};
Blockly.Blocks['sdl_output_set'] = {
  init: function() {
    this.appendDummyInput()
        .appendField("output_set");
    this.appendDummyInput()
        .appendField("通过IO端子通道，输出高低电平");
    this.appendDummyInput()
        .appendField("通道：")
        .appendField(new Blockly.FieldDropdown([["SDI12_1","\"SDI12_1\""], ["SDI12_2","\"SDI12_2\""], ["PWM_1","\"PWM_1\""], ["PWM_2","\"PWM_2\""]]), "CHANNEL");
    this.appendDummyInput()
        .appendField("高低电平：")
        .appendField(new Blockly.FieldNumber(0, 0, 1, 1), "VOLTAGE");
    this.setColour(230);
    this.setPreviousStatement(true, null);
    this.setNextStatement(true, null);
 this.setTooltip("");
 this.setHelpUrl("");
  }
};
Blockly.Lua['sdl_output_set'] = function(block) {
  var dropdown_channel = block.getFieldValue('CHANNEL');
  var number_voltage = block.getFieldValue('VOLTAGE');
  // TODO: Assemble Lua into code variable.
  var code = 'output_set('+dropdown_channel +','+number_voltage+')\n';
  // TODO: Change ORDER_NONE to the correct strength.
  return code;
};

Blockly.Blocks['sdl_input_get'] = {
  init: function() {
    this.appendDummyInput()
        .appendField("input_get");
    this.appendDummyInput()
        .appendField("通过IO端子通道，获取输入高低电平");
    this.appendDummyInput()
        .appendField("通道：")
        .appendField(new Blockly.FieldDropdown([["SDI12_1","\"SDI12_1\""], ["SDI12_2","\"SDI12_2\""], ["PWM_1","\"PWM_1\""], ["PWM_2","\"PWM_2\""]]), "CHANNEL");
    this.setOutput(true, "Number");
    this.setColour(230);
 this.setTooltip("");
 this.setHelpUrl("");
  }
};
Blockly.Lua['sdl_input_get'] = function(block) {
  var dropdown_channel = block.getFieldValue('CHANNEL');
  // TODO: Assemble Lua into code variable.
  var code = 'input_get('+dropdown_channel+')';
  // TODO: Change ORDER_NONE to the correct strength.
  return [code, Blockly.Lua.ORDER_NONE];
};

Blockly.Blocks['sdl_sdi12_1_send'] = {
  init: function() {
    this.appendDummyInput()
        .appendField("sdi12_1_send");
    this.appendDummyInput()
        .appendField("使用SDI12通道1进行采集");
    this.appendValueInput("DATA")
        .setCheck("Array")
        .appendField("发送数据：")
        .appendField(new Blockly.FieldVariable("data"), "DATA");
    this.appendDummyInput()
        .appendField("超时时间（秒）：")
        .appendField(new Blockly.FieldNumber(3, 0, 60, 1), "TIMEOUT");
    this.appendDummyInput()
        .appendField("回调函数：")
        .appendField(new Blockly.FieldTextInput("sdi12_1_bus_callback"+(busCBCnt++)), "CALLBACK");
    this.setPreviousStatement(true, null);
    this.setNextStatement(true, null);
    this.setColour(230);
 this.setTooltip("");
 this.setHelpUrl("");
 this.setCommentText("使用SDI12_1进行采集");
 this.setOnChange(function(event){
	if(event.type == Blockly.Events.CREATE)
	{
		var block = workspace.getBlockById(event.blockId);
		if(block == this)
		{
			//Blockly.Events.disable();
			var cbName = this.getField("CALLBACK").text_;
			var busCbBlock = workspace.newBlock("procedures_defnoreturn");

			busCbBlock.initSvg();
			//Blockly.Events.enable();
			busCbBlock.getField("NAME").setText(cbName);
			busCbBlock.arguments_ = ["status","data"];
			busCbBlock.setCommentText("sdi12_1回调函数");
			busCbBlock.updateParams_();
			busCbBlock.render();
		}
	}
 });
  }
};
Blockly.Lua['sdl_sdi12_1_send'] = function(block) {
  var variable_data = Blockly.Lua.variableDB_.getName(block.getFieldValue('DATA'), Blockly.Variables.NAME_TYPE);
  var value_data = Blockly.Lua.valueToCode(block, 'DATA', Blockly.Lua.ORDER_ATOMIC) || '{}';
  var number_timeout = block.getFieldValue('TIMEOUT');
  var text_callback = block.getFieldValue('CALLBACK');
  // TODO: Assemble Lua into code variable.
  var code = 'sdi12_1_send('+value_data+','+number_timeout+','+text_callback+')\n';
  return code;
};
Blockly.Blocks['sdl_sdi12_2_send'] = {
  init: function() {
    this.appendDummyInput()
        .appendField("sdi12_2_send");
    this.appendDummyInput()
        .appendField("使用SDI12通道2进行采集");
    this.appendValueInput("DATA")
        .setCheck("Array")
        .appendField("发送数据：")
        .appendField(new Blockly.FieldVariable("data"), "DATA");
    this.appendDummyInput()
        .appendField("超时时间（秒）：")
        .appendField(new Blockly.FieldNumber(3, 0, 60, 1), "TIMEOUT");
    this.appendDummyInput()
        .appendField("回调函数：")
        .appendField(new Blockly.FieldTextInput("sdi12_2_bus_callback"+(busCBCnt++)), "CALLBACK");
    this.setPreviousStatement(true, null);
    this.setNextStatement(true, null);
    this.setColour(230);
 this.setTooltip("");
 this.setHelpUrl("");
 this.setCommentText("使用SDI12_2进行采集");
 this.setOnChange(function(event){
	if(event.type == Blockly.Events.CREATE)
	{
		var block = workspace.getBlockById(event.blockId);
		if(block == this)
		{
			//Blockly.Events.disable();
			var cbName = this.getField("CALLBACK").text_;
			var busCbBlock = workspace.newBlock("procedures_defnoreturn");

			busCbBlock.initSvg();
			//Blockly.Events.enable();
			busCbBlock.getField("NAME").setText(cbName);
			busCbBlock.arguments_ = ["status","data"];
			busCbBlock.setCommentText("sdi12_2回调函数");
			busCbBlock.updateParams_();
			busCbBlock.render();
		}
	}
 });
  }
};
Blockly.Lua['sdl_sdi12_2_send'] = function(block) {
  var variable_data = Blockly.Lua.variableDB_.getName(block.getFieldValue('DATA'), Blockly.Variables.NAME_TYPE);
  var value_data = Blockly.Lua.valueToCode(block, 'DATA', Blockly.Lua.ORDER_ATOMIC) || '{}';
  var number_timeout = block.getFieldValue('TIMEOUT');
  var text_callback = block.getFieldValue('CALLBACK');
  // TODO: Assemble Lua into code variable.
  var code = 'sdi12_2_send('+value_data+','+number_timeout+','+text_callback+')\n';
  return code;
};
Blockly.Blocks['sdl_pwm_start'] = {
  init: function() {
    this.appendDummyInput()
        .appendField("pwm_start");
    this.appendDummyInput()
        .appendField("启动PWM计数");
    this.appendDummyInput()
        .appendField("PWM端子通道：")
        .appendField(new Blockly.FieldDropdown([["PWM_1","\"PWM_1\""], ["PWM_2","\"PWM_2\""]]), "CHANNEL");
    this.appendDummyInput()
        .appendField("PWM初始计数值：")
        .appendField(new Blockly.FieldNumber(0, 0, Infinity, 1), "COUNT");
    this.setPreviousStatement(true, null);
    this.setNextStatement(true, null);
    this.setColour(230);
 this.setTooltip("");
 this.setHelpUrl("");
  }
};
Blockly.Lua['sdl_pwm_start'] = function(block) {
  var dropdown_channel = block.getFieldValue('CHANNEL');
  var number_count = block.getFieldValue('COUNT');
  // TODO: Assemble Lua into code variable.
  var code = 'pwm_start('+ dropdown_channel+','+number_count+')\n';
  return code;
};

Blockly.Blocks['sdl_pwm_stop'] = {
  init: function() {
    this.appendDummyInput()
        .appendField("pwm_stop");
    this.appendDummyInput()
        .appendField("停止PWM计数");
    this.appendDummyInput()
        .appendField("PWM端子通道：")
        .appendField(new Blockly.FieldDropdown([["PWM_1","\"PWM_1\""], ["PWM_2","\"PWM_2\""]]), "CHANNEL");
    this.setPreviousStatement(true, null);
    this.setNextStatement(true, null);
    this.setColour(230);
 this.setTooltip("");
 this.setHelpUrl("");
  }
};
Blockly.Lua['sdl_pwm_stop'] = function(block) {
  var dropdown_channel = block.getFieldValue('CHANNEL');
  // TODO: Assemble Lua into code variable.
  var code = 'pwm_stop('+dropdown_channel+')\n';
  return code;
};
Blockly.Blocks['sdl_pwm_status'] = {
  init: function() {
    this.appendDummyInput()
        .appendField("pwm_status");
    this.appendDummyInput()
        .appendField("获取PWM通道的启动状态");
    this.appendDummyInput()
        .appendField("PWM端子通道：")
        .appendField(new Blockly.FieldDropdown([["PWM_1","\"PWM_1\""], ["PWM_2","\"PWM_2\""]]), "CHANNEL");
    this.setOutput(true, "Number");
    this.setColour(230);
 this.setTooltip("");
 this.setHelpUrl("");
  }
};
Blockly.Lua['sdl_pwm_status'] = function(block) {
  var dropdown_channel = block.getFieldValue('CHANNEL');
  // TODO: Assemble Lua into code variable.
  var code = 'pwm_status('+dropdown_channel+')';
  // TODO: Change ORDER_NONE to the correct strength.
  return [code, Blockly.Lua.ORDER_NONE];
};
Blockly.Blocks['sdl_pwm_set'] = {
  init: function() {
    this.appendDummyInput()
        .appendField("pwm_set");
    this.appendDummyInput()
        .appendField("设置PWM计数");
    this.appendDummyInput()
        .appendField("PWM端子通道：")
        .appendField(new Blockly.FieldDropdown([["PWM_1","\"PWM_1\""], ["PWM_2","\"PWM_2\""]]), "CHANNEL");
    this.appendDummyInput()
        .appendField("PWM计数值：")
        .appendField(new Blockly.FieldNumber(0, 0, Infinity, 1), "COUNT");
    this.setPreviousStatement(true, null);
    this.setNextStatement(true, null);
    this.setColour(230);
 this.setTooltip("");
 this.setHelpUrl("");
  }
};
Blockly.Lua['sdl_pwm_set'] = function(block) {
  var dropdown_channel = block.getFieldValue('CHANNEL');
  var value_data = Blockly.Lua.valueToCode(block, 'DATA', Blockly.Lua.ORDER_ATOMIC);
  var number_count = block.getFieldValue('COUNT');
  // TODO: Assemble Lua into code variable.
  var code = 'pwm_set('+ dropdown_channel+','+number_count+')\n';
  return code;
};
Blockly.Blocks['sdl_pwm_get'] = {
  init: function() {
    this.appendDummyInput()
        .appendField("pwm_get");
    this.appendDummyInput()
        .appendField("获取PWM通道的计数值");
    this.appendDummyInput()
        .appendField("PWM端子通道：")
        .appendField(new Blockly.FieldDropdown([["PWM_1","\"PWM_1\""], ["PWM_2","\"PWM_2\""]]), "CHANNEL");
    this.setOutput(true, "Number");
    this.setColour(230);
 this.setTooltip("");
 this.setHelpUrl("");
  }
};
Blockly.Lua['sdl_pwm_get'] = function(block) {
  var dropdown_channel = block.getFieldValue('CHANNEL');
  // TODO: Assemble Lua into code variable.
   var code = 'pwm_get('+dropdown_channel+')';
  // TODO: Change ORDER_NONE to the correct strength.
  return [code, Blockly.Lua.ORDER_NONE];
};

Blockly.Blocks['sdl_pulse1_count_start'] = {
  init: function() {
    this.appendDummyInput()
        .appendField("pulse1_count_start");
    this.appendDummyInput()
        .appendField("获取指定时间内PWM_1通道的计数值");
    this.appendDummyInput()
        .appendField("超时时间：")
        .appendField(new Blockly.FieldNumber(1,0),"TIMEOUT");

    this.appendDummyInput()
        .appendField("回调函数：")
        .appendField(new Blockly.FieldTextInput("pwm_callback"+(busCBCnt++)), "CALLBACK");

    this.setPreviousStatement(true, null);
    this.setNextStatement(true, null);
    this.setColour(230);
 this.setTooltip("");
 this.setHelpUrl("");
 this.setCommentText("指定时间内高速脉冲计数");
 this.setOnChange(function(event){
	if(event.type == Blockly.Events.CREATE)
	{
		var block = workspace.getBlockById(event.blockId);
		if(block == this)
		{
			//Blockly.Events.disable();
			var cbName = this.getField("CALLBACK").text_;
			var busCbBlock = workspace.newBlock("procedures_defnoreturn");

			busCbBlock.initSvg();
			//Blockly.Events.enable();
			busCbBlock.getField("NAME").setText(cbName);
			busCbBlock.arguments_ = ["timeout","data"];
			busCbBlock.updateParams_();
			busCbBlock.setCommentText("pwm回调函数");
			busCbBlock.render();
		}
	}
 });
  }
};
Blockly.Lua['sdl_pulse1_count_start'] = function(block) {
  var number_timeout = block.getFieldValue('TIMEOUT');

  var statement_name =block.getFieldValue('CALLBACK');
  // TODO: Assemble JavaScript into code variable.
  var code = 'pulse1_count_start('+ number_timeout+ ','+statement_name+')\n';
  return code;
};
Blockly.Blocks['sdl_pulse2_count_start'] = {
  init: function() {
    this.appendDummyInput()
        .appendField("pulse2_count_start");
    this.appendDummyInput()
        .appendField("获取指定时间内PWM_2通道的计数值");
    this.appendDummyInput()
        .appendField("超时时间：")
        .appendField(new Blockly.FieldNumber(1,0),"TIMEOUT");

    this.appendDummyInput()
        .appendField("回调函数：")
        .appendField(new Blockly.FieldTextInput("pwm_callback"+(busCBCnt++)), "CALLBACK");

    this.setPreviousStatement(true, null);
    this.setNextStatement(true, null);
    this.setColour(230);
 this.setTooltip("");
 this.setHelpUrl("");
 this.setCommentText("指定时间内高速脉冲计数");
 this.setOnChange(function(event){
	if(event.type == Blockly.Events.CREATE)
	{
		var block = workspace.getBlockById(event.blockId);
		if(block == this)
		{
			//Blockly.Events.disable();
			var cbName = this.getField("CALLBACK").text_;
			var busCbBlock = workspace.newBlock("procedures_defnoreturn");

			busCbBlock.initSvg();
			//Blockly.Events.enable();
			busCbBlock.getField("NAME").setText(cbName);
			busCbBlock.arguments_ = ["timeout","data"];
			busCbBlock.updateParams_();
			busCbBlock.setCommentText("pwm回调函数");
			busCbBlock.render();
		}
	}
 });
  }
};
Blockly.Lua['sdl_pulse2_count_start'] = function(block) {
  var number_timeout = block.getFieldValue('TIMEOUT');

  var statement_name =block.getFieldValue('CALLBACK');
  // TODO: Assemble JavaScript into code variable.
  var code = 'pulse1_count_start('+ number_timeout+ ','+statement_name+')\n';
  return code;
};
Blockly.Blocks['sdl_pt_temperature'] = {
  init: function() {
    this.appendDummyInput()
        .appendField("pt_temperature");
    this.appendDummyInput()
        .appendField("通过铂电阻的阻值，计算温度");
    this.appendDummyInput()
        .appendField("铂电阻类型：")
        .appendField(new Blockly.FieldDropdown([["PT100","\"PT100\""]]), "CHANNEL");
    this.appendValueInput("VALUE")
        .setCheck("Number")
        .appendField("电阻阻值：");
        //.appendField(new Blockly.FieldNumber(100, -Infinity, Infinity, 5), "VALUE");
    this.setOutput(true, "Number");
    this.setColour(230);
 this.setTooltip("");
 this.setHelpUrl("");
  }
};
Blockly.Lua['sdl_pt_temperature'] = function(block) {
  var dropdown_channel = block.getFieldValue('CHANNEL');
  
   var value_buffer = Blockly.Lua.valueToCode(block, 'VALUE', Blockly.Lua.ORDER_ATOMIC)|| '100';
  //var number_value = block.getFieldValue('VALUE');
  // TODO: Assemble Lua into code variable.
  var code = 'pt_temperature('+dropdown_channel+','+value_buffer+')'
  // TODO: Change ORDER_NONE to the correct strength.
  return [code, Blockly.Lua.ORDER_NONE];
};
Blockly.Blocks['sdl_relay'] = {
  init: function() {
    this.appendDummyInput()
        .appendField("relay");
    this.appendDummyInput()
        .appendField("控制继电器吸合开关");
    this.appendDummyInput()
        .appendField("开关（1-吸合，0-断开）：")
        .appendField(new Blockly.FieldNumber(0, 0, 1, 1), "VALUE");
    this.setPreviousStatement(true, null);
    this.setNextStatement(true, null);
    this.setColour(230);
 this.setTooltip("");
 this.setHelpUrl("");
  }
};
Blockly.Lua['sdl_relay'] = function(block) {
  var number_value = block.getFieldValue('VALUE');
  // TODO: Assemble Lua into code variable.
  var code = 'relay('+number_value+')\n';
  return code;
};
Blockly.Blocks['sdl_sys_power_vol'] = {
  init: function() {
    this.appendDummyInput()
        .appendField("sys_power_vol");
    this.appendDummyInput()
        .appendField("获取系统供电电压");
    this.setOutput(true, "Number");
    this.setColour(230);
 this.setTooltip("");
 this.setHelpUrl("");
  }
};
Blockly.Lua['sdl_sys_power_vol'] = function(block) {
  // TODO: Assemble Lua into code variable.
  var code = 'sys_power_vol()';
  // TODO: Change ORDER_NONE to the correct strength.
  return [code, Blockly.Lua.ORDER_NONE];
};
Blockly.Blocks['sdl_print_table'] = {
  init: function() {
    this.appendDummyInput()
        .appendField("print_table");
    this.appendDummyInput()
        .appendField("打印table");
    this.appendValueInput("NAME")
        .setCheck("Array")
        .appendField("table：")
        .appendField(new Blockly.FieldVariable("item"), "NAME");
    this.appendDummyInput()
        .appendField("打印数字为16进制字节")
        .appendField(new Blockly.FieldCheckbox("TRUE"), "HEX");
    this.setPreviousStatement(true, null);
    this.setNextStatement(true, null);
    this.setColour(230);
 this.setTooltip("");
 this.setHelpUrl("");
  }
};
Blockly.Lua['sdl_print_table'] = function(block) {
  var variable_name = Blockly.Lua.variableDB_.getName(block.getFieldValue('NAME'), Blockly.Variables.NAME_TYPE);
  var value_name = Blockly.Lua.valueToCode(block, 'NAME', Blockly.Lua.ORDER_ATOMIC) || '{}';
  var checkbox_hex = block.getFieldValue('HEX') == 'TRUE';
  // TODO: Assemble Lua into code variable.
var functionName = Blockly.Lua.provideFunction_(
        'print_table',
        ['function ' + Blockly.Lua.FUNCTION_NAME_PLACEHOLDER_ + '(t,hex)',
'	local print_r_cache={}',
'    local function sub_print_r(t,indent)',
'        if (print_r_cache[tostring(t)]) then',
'            print(indent.."*"..tostring(t))',
'        else',
'            print_r_cache[tostring(t)]=true',
'            if (type(t)=="table") then',
'                for pos,val in pairs(t) do',
'                    if (type(val)=="table") then',
'                        print(indent.."["..pos.."] = "..tostring(t).." {")',
'                        sub_print_r(val,indent..string.rep(" ",string.len(pos)+8))',
'                        print(indent..string.rep(" ",string.len(pos)+6).."}")',
'                    elseif (type(val)=="string") then',
'                        print(indent.."["..pos..\'] = "\'..val..\'"\')',
'                    elseif (hex) then',
'                        print(indent.."["..pos.."] = "..string.format("0x%02x",val))',
'                    else',
'                        print(indent.."["..pos.."] = "..tostring(val))',
'                    end',
'                end',
'            else',
'                print(indent..tostring(t))',
'            end',
'        end',
'    end',
'    if (type(t)=="table") then',
'        print(tostring(t).." {")',
'        sub_print_r(t,"  ")',
'        print("}")',
'    else',
'        sub_print_r(t,"  ")',
'    end',
'    print()',

'end']);
  var code = functionName + '('+value_name+','+checkbox_hex+')\n';
  return code;
};

Blockly.Blocks['sdl_string2table'] = {
  init: function() {
    this.appendDummyInput()
        .appendField("string2table");
    this.appendDummyInput()
        .appendField("字符串转换成table");
    this.appendValueInput("NAME")
        .setCheck("String")
        .appendField("ascii string")
        .appendField(new Blockly.FieldTextInput("\"\""), "STRING");
    this.setOutput(true, "Array");
    this.setColour(230);
 this.setTooltip("");
 this.setHelpUrl("");
  }
};
Blockly.Lua['sdl_string2table'] = function(block) {
  var text_string = block.getFieldValue('STRING');
  var value_name = Blockly.Lua.valueToCode(block, 'NAME', Blockly.Lua.ORDER_ATOMIC) || text_string;
  // TODO: Assemble Lua into code variable.
  var functionName = Blockly.Lua.provideFunction_(
        'string2table',
        ['function ' + Blockly.Lua.FUNCTION_NAME_PLACEHOLDER_ + '(s)',
'    t = {}',
'    for i=1,string.len(s),1 do',
'        t[i] = string.byte(s,i)',
'    end',
'    return t',
'end' ]);
  var code = functionName + '('+ value_name + ')'; 
  // TODO: Change ORDER_NONE to the correct strength.
  return [code, Blockly.Lua.ORDER_NONE];
};


Blockly.Blocks['sdl_table2string'] = {
  init: function() {
    this.appendDummyInput()
        .appendField("table2string");
    this.appendDummyInput()
        .appendField("table转换成字符串");
    this.appendValueInput("NAME")
        .setCheck("Array")
        .appendField("table:")
	.appendField(new Blockly.FieldVariable("table"), "STRING");
    this.setOutput(true, "Array");
    this.setColour(230);
 this.setTooltip("");
 this.setHelpUrl("");
  }
};
Blockly.Lua['sdl_table2string'] = function(block) {
  var text_string = block.getFieldValue('STRING');
  var value_name = Blockly.Lua.valueToCode(block, 'NAME', Blockly.Lua.ORDER_ATOMIC) || '{}';
  // TODO: Assemble Lua into code variable.
  var functionName = Blockly.Lua.provideFunction_(
        'table2string',
        ['function ' + Blockly.Lua.FUNCTION_NAME_PLACEHOLDER_ + '(t)',
'    s = ""',
'    for k,p in pairs(t) do',
'       s = s.. string.char(p) ',
'    end',
'    return s',
'end' ]);
  var code = functionName + '('+ value_name + ')'; 
  // TODO: Change ORDER_NONE to the correct strength.
  return [code, Blockly.Lua.ORDER_NONE];
};

Blockly.Blocks['sdl_test'] = {
  init: function() {
    this.appendDummyInput()
        .appendField("test")
	.appendField(new Blockly.FieldTextInput(""))
	.appendField('','PARAMS');

     this.appendStatementInput('STACK')
.appendField(Blockly.Msg['PROCEDURES_DEFNORETURN_DO']);

	this.setMutator(new Blockly.Mutator(['test_mutatorarg']));

    this.setColour(230);
 this.setTooltip("");
 this.setHelpUrl("");
  },
  mutationToDom: function(opt_paramIds) {
    var container = document.createElement('mutation');
    if (opt_paramIds) {
      container.setAttribute('name', this.getFieldValue('NAME'));
    }
    for (var i = 0; i < this.argumentVarModels_.length; i++) {
      var parameter = document.createElement('arg');
      var argModel = this.argumentVarModels_[i];
      parameter.setAttribute('name', argModel.name);
      parameter.setAttribute('varid', argModel.getId());
      if (opt_paramIds && this.paramIds_) {
        parameter.setAttribute('paramId', this.paramIds_[i]);
      }
      container.appendChild(parameter);
    }

    // Save whether the statement input is visible.
    if (!this.hasStatements_) {
      container.setAttribute('statements', 'false');
    }
    return container;
},
       
};

Blockly.Lua['sdl_test'] = function(block) {
	code='';
  return [code, Blockly.Lua.ORDER_NONE];
};

</script>


	
	
	</head>
<body>
<div class="app-container">
  <div id="blocklyDiv" class="main blockly-panel"></div>
  <div id="codeDiv" class="main output-panel">
    <div class="dropdown-bar">
      Language:
      <div id="im-just-an-underline">
        <select id="languageDropdown" onchange="myUpdateFunction();">
          <option value="Lua" selected="selected">Lua</option>
        </select>
      </div>
    </div>
    <hr class="POps">
    <pre class="prettyprint but-not-that-pretty"><span class="kwd">var</span><span class="pln"> </span><span class="typ">Count</span><span class="pun">;</span><span class="pln"><br><br><br></span><span class="typ">Count</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="lit">1</span><span class="pun">;</span><span class="pln"><br></span><span class="kwd">while</span><span class="pln"> </span><span class="pun">(</span><span class="typ">Count</span><span class="pln"> </span><span class="pun">&lt;=</span><span class="pln"> </span><span class="lit">3</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln"><br>&nbsp; window</span><span class="pun">.</span><span class="pln">alert</span><span class="pun">(</span><span class="str">'Hello World!'</span><span class="pun">);</span><span class="pln"><br>&nbsp; </span><span class="typ">Count</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="typ">Count</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> </span><span class="lit">1</span><span class="pun">;</span><span class="pln"><br></span><span class="pun">}</span></pre>
  </div>
  <div id="playButton" class="play-button material-icons">play_arrow</div>
</div>
<xml id="toolbox" style="display: none">
	<category id="catSDL" colour="210" name="智能数据采集仪" expanded="true">
			
			<block type="sdl_on_start"></block>
			<block type="sdl_on_config"></block>
		<category id="catSDLBUS" name="数字总线采集">
			<block type="sdl_rs422_send"></block>
			<block type="sdl_modbus_send"></block>
			<block type="sdl_rs232_send"></block>
			<block type="sdl_sdi12_1_send"></block>
			<block type="sdl_sdi12_2_send"></block>
		</category>
		<category id="catSDLDIGITAL" name="模拟信号采集">
			<block type="sdl_vol_single_get"></block>
			<block type="sdl_vol_diff_get"></block>
			<block type="sdl_current_get"></block>
			<block type="sdl_pt100_3wire_get"></block>
			<block type="sdl_pt100_4wire_get"></block>

		</category>
		<category id="catSDLDIGITAL" name="数字电平">
			<block type="sdl_output_set"></block>
			<block type="sdl_input_get"></block>
		</category>
		<category id="catSDLPWM" name="脉冲计数与频率">
			<block type="sdl_pwm_start"></block>
			<block type="sdl_pwm_stop"></block>
			<block type="sdl_pwm_status"></block>
			<block type="sdl_pwm_set"></block>
			<block type="sdl_pwm_get"></block>
			<block type="sdl_pulse1_count_start"></block>
			<block type="sdl_pulse2_count_start"></block>
		</category>
		<category id="catSDLCACHE" name="缓存">
			<block type="sdl_set_global_number"></block>
			<block type="sdl_get_global_number"></block>
			<block type="sdl_set_global_buffer"></block>
			<block type="sdl_get_global_buffer"></block>
		</category>
		<category id="catSDLDELAY" name="延时">
			<block type="sdl_delay_call"></block>
		</category>
		<category id="catSDLSYSTEM" name="数据">
			<block type="sdl_add_data_item"></block>
		</category>
		<category id="catSDLTIME" name="时间">
			<block type="sdl_bcdtime"></block>
			<block type="sdl_timestamp"></block>
			<block type="sdl_datetime"></block>
		</category>
		<category id="catSDLUTILS" name="工具">
			<block type="sdl_pt_temperature"></block>
			<block type="sdl_relay"></block>
			<block type="sdl_sys_power_vol"></block>
			<block type="sdl_print_table"></block>
			<block type="sdl_string2table"></block>
			<block type="sdl_table2string"></block>
		</category>
	</category>
    <category id="catLogic" colour="210" name="逻辑">
      <block type="controls_if"></block>
      <block type="logic_compare"></block>
      <block type="logic_operation"></block>
      <block type="logic_negate"></block>
      <block type="logic_boolean"></block>
      <block type="logic_null"></block>
      <block type="logic_ternary"></block>
    </category>
    <category id="catLoops" colour="120" name="循环">
      <block type="controls_repeat_ext">
        <value name="TIMES">
          <shadow type="math_number">
            <field name="NUM">10</field>
          </shadow>
        </value>
      </block>
      <block type="controls_whileUntil"></block>
      <block type="controls_for">
        <value name="FROM">
          <shadow type="math_number">
            <field name="NUM">1</field>
          </shadow>
        </value>
        <value name="TO">
          <shadow type="math_number">
            <field name="NUM">10</field>
          </shadow>
        </value>
        <value name="BY">
          <shadow type="math_number">
            <field name="NUM">1</field>
          </shadow>
        </value>
      </block>
      <block type="controls_forEach"></block>
      <block type="controls_flow_statements"></block>
    </category>
    <category id="catMath" colour="230" name="运算">
      <block type="math_number"></block>
      <block type="math_arithmetic">
        <value name="A">
          <shadow type="math_number">
            <field name="NUM">1</field>
          </shadow>
        </value>
        <value name="B">
          <shadow type="math_number">
            <field name="NUM">1</field>
          </shadow>
        </value>
      </block>
      <block type="math_single">
        <value name="NUM">
          <shadow type="math_number">
            <field name="NUM">9</field>
          </shadow>
        </value>
      </block>
      <block type="math_trig">
        <value name="NUM">
          <shadow type="math_number">
            <field name="NUM">45</field>
          </shadow>
        </value>
      </block>
      <block type="math_constant"></block>
      <block type="math_number_property">
        <value name="NUMBER_TO_CHECK">
          <shadow type="math_number">
            <field name="NUM">0</field>
          </shadow>
        </value>
      </block>
      <block type="math_change">
        <value name="DELTA">
          <shadow type="math_number">
            <field name="NUM">1</field>
          </shadow>
        </value>
      </block>
      <block type="math_round">
        <value name="NUM">
          <shadow type="math_number">
            <field name="NUM">3.1</field>
          </shadow>
        </value>
      </block>
      <block type="math_on_list"></block>
      <block type="math_modulo">
        <value name="DIVIDEND">
          <shadow type="math_number">
            <field name="NUM">64</field>
          </shadow>
        </value>
        <value name="DIVISOR">
          <shadow type="math_number">
            <field name="NUM">10</field>
          </shadow>
        </value>
      </block>
      <block type="math_constrain">
        <value name="VALUE">
          <shadow type="math_number">
            <field name="NUM">50</field>
          </shadow>
        </value>
        <value name="LOW">
          <shadow type="math_number">
            <field name="NUM">1</field>
          </shadow>
        </value>
        <value name="HIGH">
          <shadow type="math_number">
            <field name="NUM">100</field>
          </shadow>
        </value>
      </block>
      <block type="math_random_int">
        <value name="FROM">
          <shadow type="math_number">
            <field name="NUM">1</field>
          </shadow>
        </value>
        <value name="TO">
          <shadow type="math_number">
            <field name="NUM">100</field>
          </shadow>
        </value>
      </block>
      <block type="math_random_float"></block>
    </category>
    <category id="catText" colour="160" name="字符串">
      <block type="text"></block>
      <block type="text_join"></block>
      <block type="text_append">
        <value name="TEXT">
          <shadow type="text"></shadow>
        </value>
      </block>
      <block type="text_length">
        <value name="VALUE">
          <shadow type="text">
            <field name="TEXT">abc</field>
          </shadow>
        </value>
      </block>
      <block type="text_isEmpty">
        <value name="VALUE">
          <shadow type="text">
            <field name="TEXT"></field>
          </shadow>
        </value>
      </block>
      <block type="text_indexOf">
        <value name="VALUE">
          <block type="variables_get">
            <field name="VAR">text</field>
          </block>
        </value>
        <value name="FIND">
          <shadow type="text">
            <field name="TEXT">abc</field>
          </shadow>
        </value>
      </block>
      <block type="text_charAt">
        <value name="VALUE">
          <block type="variables_get">
            <field name="VAR">text</field>
          </block>
        </value>
      </block>
      <block type="text_getSubstring">
        <value name="STRING">
          <block type="variables_get">
            <field name="VAR">text</field>
          </block>
        </value>
      </block>
      <block type="text_changeCase">
        <value name="TEXT">
          <shadow type="text">
            <field name="TEXT">abc</field>
          </shadow>
        </value>
      </block>
      <block type="text_trim">
        <value name="TEXT">
          <shadow type="text">
            <field name="TEXT">abc</field>
          </shadow>
        </value>
      </block>
      <block type="text_print">
        <value name="TEXT">
          <shadow type="text">
            <field name="TEXT">abc</field>
          </shadow>
        </value>
      </block>
      <block type="text_prompt_ext">
        <value name="TEXT">
          <shadow type="text">
            <field name="TEXT">abc</field>
          </shadow>
        </value>
      </block>
    </category>
    <category id="catLists" colour="260" name="列表">
      <block type="lists_create_with">
        <mutation items="0"></mutation>
      </block>
      <block type="lists_create_with"></block>
      <block type="lists_repeat">
        <value name="NUM">
          <shadow type="math_number">
            <field name="NUM">5</field>
          </shadow>
        </value>
      </block>
      <block type="lists_length"></block>
      <block type="lists_isEmpty"></block>
      <block type="lists_indexOf">
        <value name="VALUE">
          <block type="variables_get">
            <field name="VAR">list</field>
          </block>
        </value>
      </block>
      <block type="lists_getIndex">
        <value name="VALUE">
          <block type="variables_get">
            <field name="VAR">list</field>
          </block>
        </value>
      </block>
      <block type="lists_setIndex">
        <value name="LIST">
          <block type="variables_get">
            <field name="VAR">list</field>
          </block>
        </value>
      </block>
      <block type="lists_getSublist">
        <value name="LIST">
          <block type="variables_get">
            <field name="VAR">list</field>
          </block>
        </value>
      </block>
      <block type="lists_split">
        <value name="DELIM">
          <shadow type="text">
            <field name="TEXT">,</field>
          </shadow>
        </value>
      </block>
      <block type="lists_sort"></block>
    </category>
    
    <sep></sep>
    <category id="catVariables" colour="330" custom="VARIABLE" name="变量"></category>
    <category id="catFunctions" colour="290" custom="PROCEDURE" name="函数"></category>
  </xml>
<xml id="blocklyDefault" style="display: none">
  <block type="sdl_on_config" x="10" y="20">
  </block>
  <block type="sdl_on_start" x="10" y="100">
  </block>
</xml>
<script>
  var workspace = Blockly.inject('blocklyDiv',
      {toolbox: document.getElementById('toolbox')});
var defaultBlocks = document.getElementById('blocklyDefault');
 Blockly.Xml.domToWorkspace(defaultBlocks, workspace);
  function myUpdateFunction(event) {


    var languageDropdown = document.getElementById('languageDropdown');
    var languageSelection = languageDropdown.options[languageDropdown.selectedIndex].value;
    var codeDiv = document.getElementById('codeDiv');
    var codeHolder = document.createElement('pre');
    codeHolder.className = 'prettyprint but-not-that-pretty';
    var code = document.createTextNode(Blockly[languageSelection].workspaceToCode(workspace));
    codeHolder.appendChild(code);
    codeDiv.replaceChild(codeHolder, codeDiv.lastElementChild);
    prettyPrint();
  }
  workspace.addChangeListener(myUpdateFunction);
  function executeBlockCode(event) {
    var code = Blockly.Lua.workspaceToCode(workspace);
  	alert(code); 
  }
  
  document.getElementById('playButton').addEventListener('click', executeBlockCode);
</script><div class="blocklyWidgetDiv"></div><div class="blocklyTooltipDiv"></div>
</body></html>
